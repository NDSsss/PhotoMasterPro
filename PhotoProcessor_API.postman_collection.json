{
  "info": {
    "name": "PhotoProcessor API",
    "description": "Complete REST API collection for PhotoProcessor with automated tests",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://photo-master-pro-dddddd1997.replit.app",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has access_token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.collectionVariables.set('auth_token', jsonData.access_token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser_{{$randomInt}}\",\n  \"email\": \"test{{$randomInt}}@example.com\",\n  \"password\": \"testpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register",
              "host": ["{{base_url}}"],
              "path": ["register"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has access_token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.collectionVariables.set('auth_token', jsonData.access_token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"testpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/login",
              "host": ["{{base_url}}"],
              "path": ["login"]
            }
          }
        }
      ]
    },
    {
      "name": "Image Processing API",
      "item": [
        {
          "name": "Remove Background",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is image file\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
                  "});",
                  "",
                  "pm.test(\"Response has Content-Disposition header\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('attachment');",
                  "});",
                  "",
                  "pm.test(\"Response size is greater than 0\", function () {",
                  "    pm.expect(pm.response.responseSize).to.be.above(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "method",
                  "value": "rembg",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/remove-background",
              "host": ["{{base_url}}"],
              "path": ["api", "remove-background"]
            }
          }
        },
        {
          "name": "Remove Background (LBM Method)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is image file\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "method",
                  "value": "lbm",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/remove-background",
              "host": ["{{base_url}}"],
              "path": ["api", "remove-background"]
            }
          }
        },
        {
          "name": "Add Frame (Classic)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is image file\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
                  "});",
                  "",
                  "pm.test(\"Filename contains 'framed'\", function () {",
                  "    var disposition = pm.response.headers.get('Content-Disposition');",
                  "    pm.expect(disposition).to.include('framed');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "frame_style",
                  "value": "classic",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/add-frame",
              "host": ["{{base_url}}"],
              "path": ["api", "add-frame"]
            }
          }
        },
        {
          "name": "Add Frame (Vintage)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is image file\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "frame_style",
                  "value": "vintage",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/add-frame",
              "host": ["{{base_url}}"],
              "path": ["api", "add-frame"]
            }
          }
        },
        {
          "name": "Smart Crop (Square)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is image file\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
                  "});",
                  "",
                  "pm.test(\"Filename contains aspect ratio\", function () {",
                  "    var disposition = pm.response.headers.get('Content-Disposition');",
                  "    pm.expect(disposition).to.include('1x1');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "aspect_ratio",
                  "value": "1:1",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/smart-crop",
              "host": ["{{base_url}}"],
              "path": ["api", "smart-crop"]
            }
          }
        },
        {
          "name": "Smart Crop (16:9)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is image file\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "aspect_ratio",
                  "value": "16:9",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/smart-crop",
              "host": ["{{base_url}}"],
              "path": ["api", "smart-crop"]
            }
          }
        },
        {
          "name": "Photo Retouch",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is image file\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
                  "});",
                  "",
                  "pm.test(\"Filename contains 'retouched'\", function () {",
                  "    var disposition = pm.response.headers.get('Content-Disposition');",
                  "    pm.expect(disposition).to.include('retouched');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/retouch",
              "host": ["{{base_url}}"],
              "path": ["api", "retouch"]
            }
          }
        },
        {
          "name": "Social Media Optimize",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test(\"Response has versions array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('versions');",
                  "    pm.expect(jsonData.versions).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Has multiple social media versions\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.versions.length).to.be.above(5);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/social-media-optimize",
              "host": ["{{base_url}}"],
              "path": ["api", "social-media-optimize"]
            }
          }
        },
        {
          "name": "Create Collage (Polaroid)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is image file\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
                  "});",
                  "",
                  "pm.test(\"Filename contains collage type\", function () {",
                  "    var disposition = pm.response.headers.get('Content-Disposition');",
                  "    pm.expect(disposition).to.include('collage_polaroid');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "collage_type",
                  "value": "polaroid",
                  "type": "text"
                },
                {
                  "key": "caption",
                  "value": "Test Polaroid Caption",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/create-collage",
              "host": ["{{base_url}}"],
              "path": ["api", "create-collage"]
            }
          }
        },
        {
          "name": "Create Collage (Grid)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is image file\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "collage_type",
                  "value": "grid",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/create-collage",
              "host": ["{{base_url}}"],
              "path": ["api", "create-collage"]
            }
          }
        },
        {
          "name": "Person Swap",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is image file or JSON\", function () {",
                  "    var contentType = pm.response.headers.get('Content-Type');",
                  "    pm.expect(contentType).to.satisfy(function(type) {",
                  "        return type.includes('image') || type.includes('application/json');",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "person_files",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "background_files",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/person-swap",
              "host": ["{{base_url}}"],
              "path": ["api", "person-swap"]
            }
          }
        }
      ]
    },
    {
      "name": "API Documentation",
      "item": [
        {
          "name": "Get API Documentation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test(\"Has API documentation structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.expect(jsonData).to.have.property('endpoints');",
                  "    pm.expect(jsonData).to.have.property('version');",
                  "});",
                  "",
                  "pm.test(\"Has all expected endpoints\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var endpoints = jsonData.endpoints;",
                  "    pm.expect(endpoints).to.have.property('/api/remove-background');",
                  "    pm.expect(endpoints).to.have.property('/api/add-frame');",
                  "    pm.expect(endpoints).to.have.property('/api/smart-crop');",
                  "    pm.expect(endpoints).to.have.property('/api/retouch');",
                  "    pm.expect(endpoints).to.have.property('/api/social-media-optimize');",
                  "    pm.expect(endpoints).to.have.property('/api/create-collage');",
                  "    pm.expect(endpoints).to.have.property('/api/person-swap');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/docs",
              "host": ["{{base_url}}"],
              "path": ["api", "docs"]
            }
          }
        }
      ]
    },
    {
      "name": "Error Handling Tests",
      "item": [
        {
          "name": "Remove Background - No File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422 (Validation Error)\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON error\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "method",
                  "value": "rembg",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/remove-background",
              "host": ["{{base_url}}"],
              "path": ["api", "remove-background"]
            }
          }
        },
        {
          "name": "Smart Crop - Invalid Aspect Ratio",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422 or 500\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([422, 500]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "aspect_ratio",
                  "value": "invalid:ratio",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/smart-crop",
              "host": ["{{base_url}}"],
              "path": ["api", "smart-crop"]
            }
          }
        }
      ]
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Performance - Remove Background",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 30 seconds\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});",
                  "",
                  "pm.test(\"Response size is reasonable\", function () {",
                  "    pm.expect(pm.response.responseSize).to.be.below(10000000); // 10MB",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "method",
                  "value": "rembg",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/remove-background",
              "host": ["{{base_url}}"],
              "path": ["api", "remove-background"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Running PhotoProcessor API test for:', pm.info.requestName);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response has valid headers', function () {",
          "    pm.expect(pm.response.headers.get('Content-Length')).to.not.be.null;",
          "});"
        ]
      }
    }
  ]
}