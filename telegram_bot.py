import os
import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode
import aiofiles
import uuid

from image_processor import ImageProcessor
from models import User, ProcessedImage, get_db

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.token = os.getenv("TELEGRAM_BOT_TOKEN", "your-bot-token-here")
        self.image_processor = ImageProcessor()
        self.user_states = {}  # Store user states for multi-step operations
        
    async def start(self):
        """Start the Telegram bot"""
        if self.token == "your-bot-token-here":
            logger.warning("Telegram bot token not configured, skipping bot startup")
            return
            
        try:
            application = Application.builder().token(self.token).build()
            
            # Add handlers
            application.add_handler(CommandHandler("start", self.start_command))
            application.add_handler(CommandHandler("help", self.help_command))
            application.add_handler(CallbackQueryHandler(self.button_callback))
            application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
            
            # Start the bot
            await application.initialize()
            await application.start()
            await application.updater.start_polling()
            
            logger.info("Telegram bot started successfully")
            
            # Keep running
            while True:
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"Error starting Telegram bot: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        
        welcome_text = f"""
üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PhotoProcessor Bot!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ (rembg –∏–ª–∏ LBM)
‚Ä¢ üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–º–æ–∫ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–ª–∏ —Å–≤–æ–∏)
‚Ä¢ üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–µ–π (–ø–æ–ª–∞—Ä–æ–∏–¥, 5x15, 5x5)
‚Ä¢ üë§ –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª—é–¥–µ–π –Ω–∞ —Ñ–æ–Ω—ã
‚Ä¢ ‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ—Ç—É—à—å

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
        """
        
        keyboard = [
            [KeyboardButton("üîÑ –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω"), KeyboardButton("üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫—É")],
            [KeyboardButton("üé≠ –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂"), KeyboardButton("üë§ –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞")],
            [KeyboardButton("‚ú® –†–µ—Ç—É—à—å —Ñ–æ—Ç–æ"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = """
üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é PhotoProcessor Bot

üñºÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∏ —è —É–±–µ—Ä—É —Ñ–æ–Ω, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç.

üì∑ **–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–µ–π**
‚Ä¢ –ü–æ–ª–∞—Ä–æ–∏–¥ - 1 —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –ª–æ–≥–æ—Ç–∏–ø–æ–º
‚Ä¢ 5x15 - 3 —Ñ–æ—Ç–æ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–ª–æ—Å–µ
‚Ä¢ 5x5 - 2 —Ñ–æ—Ç–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

üñºÔ∏è **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–º–æ–∫**
–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ä–∞–º–∫–∏: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è, –≤–∏–Ω—Ç–∞–∂ –∏–ª–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è.

‚ú® **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ—Ç—É—à—å**
–£–ª—É—á—à–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞, —Ä–µ–∑–∫–æ—Å—Ç–∏ –∏ —Ü–≤–µ—Ç–æ–ø–µ—Ä–µ–¥–∞—á–∏.

üí° **–ë—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±**: –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏!
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages"""
        text = update.message.text
        user_id = update.effective_user.id
        
        if text == "üîÑ –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω":
            await self.request_background_removal_method(update, context)
        elif text == "üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫—É":
            await self.request_photo_for_frame(update, context)
        elif text == "üé≠ –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂":
            await self.show_collage_options(update, context)
        elif text == "üë§ –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞":
            await self.request_person_photo(update, context)
        elif text == "‚ú® –†–µ—Ç—É—à—å —Ñ–æ—Ç–æ":
            await self.request_photo_for_retouch(update, context)
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await self.help_command(update, context)
        else:
            # Handle captions for collages
            if user_id in self.user_states and self.user_states[user_id].get("waiting_for_caption"):
                self.user_states[user_id]["caption"] = text
                self.user_states[user_id]["waiting_for_caption"] = False
                await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–æ–ª–ª–∞–∂–∞.")
            else:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle photo messages"""
        user_id = update.effective_user.id
        
        # Check if user is in a specific workflow
        if user_id in self.user_states:
            state = self.user_states[user_id]
            
            if state.get("action") == "remove_background":
                await self.process_background_removal(update, context)
            elif state.get("action") == "add_frame":
                await self.show_frame_options(update, context)
            elif state.get("action") == "retouch":
                await self.process_retouch(update, context)
            elif state.get("action") == "collage":
                await self.collect_collage_photos(update, context)
            else:
                await self.show_photo_options(update, context)
        else:
            # Show options for the photo
            await self.show_photo_options(update, context)
    
    async def show_photo_options(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show processing options for uploaded photo"""
        keyboard = [
            [InlineKeyboardButton("üñºÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω", callback_data="quick_remove_bg")],
            [InlineKeyboardButton("üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫—É", callback_data="quick_add_frame")],
            [InlineKeyboardButton("‚ú® –†–µ—Ç—É—à—å", callback_data="quick_retouch")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ñ–æ—Ç–æ?",
            reply_markup=reply_markup
        )
        
        # Store photo for processing
        user_id = update.effective_user.id
        photo = update.message.photo[-1]  # Get highest resolution
        self.user_states[user_id] = {"current_photo": photo}
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline button callbacks"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        data = query.data
        
        if data == "quick_remove_bg":
            await self.process_quick_background_removal(query, context)
        elif data == "quick_add_frame":
            await self.show_frame_options_for_current_photo(query, context)
        elif data == "quick_retouch":
            await self.process_quick_retouch(query, context)
        elif data.startswith("frame_"):
            frame_style = data.replace("frame_", "")
            await self.process_frame_addition(query, context, frame_style)
        elif data.startswith("collage_"):
            collage_type = data.replace("collage_", "")
            await self.start_collage_process(query, context, collage_type)
    
    async def request_photo_for_background_removal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Request photo for background removal"""
        user_id = update.effective_user.id
        self.user_states[user_id] = {"action": "remove_background"}
        
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞.")
    
    async def process_background_removal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Process background removal"""
        try:
            await update.message.reply_text("üîÑ –£–¥–∞–ª—è—é —Ñ–æ–Ω... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            
            # Download photo
            photo = update.message.photo[-1]
            file = await context.bot.get_file(photo.file_id)
            
            file_id = str(uuid.uuid4())
            input_path = f"uploads/{file_id}_input.jpg"
            
            await file.download_to_drive(input_path)
            
            # Process
            output_path = await self.image_processor.remove_background(input_path, file_id)
            
            # Send result
            with open(output_path, 'rb') as f:
                await update.message.reply_photo(
                    photo=f,
                    caption="‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
                )
            
            # Cleanup
            os.remove(input_path)
            
            # Clear state
            user_id = update.effective_user.id
            if user_id in self.user_states:
                del self.user_states[user_id]
                
        except Exception as e:
            logger.error(f"Error in background removal: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")
    
    async def process_quick_background_removal(self, query, context):
        """Process quick background removal from inline button"""
        try:
            await query.edit_message_text("üîÑ –£–¥–∞–ª—è—é —Ñ–æ–Ω... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            
            user_id = query.from_user.id
            if user_id not in self.user_states or "current_photo" not in self.user_states[user_id]:
                await query.edit_message_text("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            photo = self.user_states[user_id]["current_photo"]
            file = await context.bot.get_file(photo.file_id)
            
            file_id = str(uuid.uuid4())
            input_path = f"uploads/{file_id}_input.jpg"
            
            await file.download_to_drive(input_path)
            
            # Process
            output_path = await self.image_processor.remove_background(input_path, file_id)
            
            # Send result
            with open(output_path, 'rb') as f:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=f,
                    caption="‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
                )
            
            await query.edit_message_text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            # Cleanup
            os.remove(input_path)
            del self.user_states[user_id]
                
        except Exception as e:
            logger.error(f"Error in quick background removal: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")
    
    async def show_collage_options(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show collage type options"""
        keyboard = [
            [InlineKeyboardButton("üì∑ –ü–æ–ª–∞—Ä–æ–∏–¥ (1 —Ñ–æ—Ç–æ)", callback_data="collage_polaroid")],
            [InlineKeyboardButton("üì∑ 5x15 (3 —Ñ–æ—Ç–æ)", callback_data="collage_5x15")],
            [InlineKeyboardButton("üì∑ 5x5 (2 —Ñ–æ—Ç–æ)", callback_data="collage_5x5")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–ª–ª–∞–∂–∞:",
            reply_markup=reply_markup
        )
    
    async def start_collage_process(self, query, context, collage_type):
        """Start collage creation process"""
        user_id = query.from_user.id
        
        # Required photos for each type
        required_photos = {"polaroid": 1, "5x15": 3, "5x5": 2}
        count = required_photos[collage_type]
        
        self.user_states[user_id] = {
            "action": "collage",
            "collage_type": collage_type,
            "required_photos": count,
            "photos": [],
            "caption": ""
        }
        
        if collage_type == "polaroid":
            await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–æ–ª–∞—Ä–æ–∏–¥–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ):")
            self.user_states[user_id]["waiting_for_caption"] = True
        else:
            await query.edit_message_text(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–æ–ª–ª–∞–∂–∞ {collage_type}.")
    
    async def collect_collage_photos(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Collect photos for collage"""
        user_id = update.effective_user.id
        state = self.user_states[user_id]
        
        # Add photo to collection
        photo = update.message.photo[-1]
        state["photos"].append(photo)
        
        collected = len(state["photos"])
        required = state["required_photos"]
        
        if collected < required:
            await update.message.reply_text(f"–ü–æ–ª—É—á–µ–Ω–æ {collected}/{required} —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ {required - collected}.")
        else:
            # Process collage
            await self.process_collage(update, context)
    
    async def process_collage(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Process collage creation"""
        try:
            await update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é –∫–æ–ª–ª–∞–∂... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            
            user_id = update.effective_user.id
            state = self.user_states[user_id]
            
            # Download photos
            file_id = str(uuid.uuid4())
            input_paths = []
            
            for i, photo in enumerate(state["photos"]):
                file = await context.bot.get_file(photo.file_id)
                input_path = f"uploads/{file_id}_input_{i}.jpg"
                await file.download_to_drive(input_path)
                input_paths.append(input_path)
            
            # Process collage
            output_path = await self.image_processor.create_collage(
                input_paths, 
                state["collage_type"], 
                state["caption"], 
                file_id
            )
            
            # Send result
            with open(output_path, 'rb') as f:
                await update.message.reply_photo(
                    photo=f,
                    caption=f"‚úÖ –ö–æ–ª–ª–∞–∂ {state['collage_type']} –≥–æ—Ç–æ–≤!"
                )
            
            # Cleanup
            for path in input_paths:
                os.remove(path)
            
            del self.user_states[user_id]
                
        except Exception as e:
            logger.error(f"Error creating collage: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–∞–∂–∞.")
    
    async def request_photo_for_frame(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Request photo for frame addition"""
        user_id = update.effective_user.id
        self.user_states[user_id] = {"action": "add_frame"}
        
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–º–∫–∏.")
    
    async def show_frame_options(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show frame style options"""
        await self.show_frame_options_for_current_photo(update, context)
    
    async def show_frame_options_for_current_photo(self, query_or_update, context):
        """Show frame options for current photo"""
        keyboard = [
            [InlineKeyboardButton("üé® –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è", callback_data="frame_classic")],
            [InlineKeyboardButton("üè¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è", callback_data="frame_modern")],
            [InlineKeyboardButton("üìú –í–∏–Ω—Ç–∞–∂", callback_data="frame_vintage")],
            [InlineKeyboardButton("üíé –≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è", callback_data="frame_elegant")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ä–∞–º–∫–∏:"
        
        if hasattr(query_or_update, 'edit_message_text'):
            await query_or_update.edit_message_text(text, reply_markup=reply_markup)
        else:
            await query_or_update.message.reply_text(text, reply_markup=reply_markup)
    
    async def process_frame_addition(self, query, context, frame_style):
        """Process frame addition"""
        try:
            await query.edit_message_text(f"üîÑ –î–æ–±–∞–≤–ª—è—é {frame_style} —Ä–∞–º–∫—É...")
            
            user_id = query.from_user.id
            if user_id not in self.user_states or "current_photo" not in self.user_states[user_id]:
                await query.edit_message_text("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            photo = self.user_states[user_id]["current_photo"]
            file = await context.bot.get_file(photo.file_id)
            
            file_id = str(uuid.uuid4())
            input_path = f"uploads/{file_id}_input.jpg"
            
            await file.download_to_drive(input_path)
            
            # Process
            output_path = await self.image_processor.add_frame(input_path, frame_style, file_id)
            
            # Send result
            with open(output_path, 'rb') as f:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=f,
                    caption=f"‚úÖ {frame_style.title()} —Ä–∞–º–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
                )
            
            await query.edit_message_text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            # Cleanup
            os.remove(input_path)
            del self.user_states[user_id]
                
        except Exception as e:
            logger.error(f"Error adding frame: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–º–∫–∏.")
    
    async def request_photo_for_retouch(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Request photo for retouching"""
        user_id = update.effective_user.id
        self.user_states[user_id] = {"action": "retouch"}
        
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ—Ç—É—à–∏.")
    
    async def process_retouch(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Process photo retouching"""
        try:
            await update.message.reply_text("üîÑ –†–µ—Ç—É—à–∏—Ä—É—é —Ñ–æ—Ç–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            
            # Download photo
            photo = update.message.photo[-1]
            file = await context.bot.get_file(photo.file_id)
            
            file_id = str(uuid.uuid4())
            input_path = f"uploads/{file_id}_input.jpg"
            
            await file.download_to_drive(input_path)
            
            # Process
            output_path = await self.image_processor.retouch_image(input_path, file_id)
            
            # Send result
            with open(output_path, 'rb') as f:
                await update.message.reply_photo(
                    photo=f,
                    caption="‚úÖ –§–æ—Ç–æ –æ—Ç—Ä–µ—Ç—É—à–∏—Ä–æ–≤–∞–Ω–æ!"
                )
            
            # Cleanup
            os.remove(input_path)
            
            # Clear state
            user_id = update.effective_user.id
            if user_id in self.user_states:
                del self.user_states[user_id]
                
        except Exception as e:
            logger.error(f"Error in retouching: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ç—É—à–∏ —Ñ–æ—Ç–æ.")
    
    async def process_quick_retouch(self, query, context):
        """Process quick retouch from inline button"""
        try:
            await query.edit_message_text("üîÑ –†–µ—Ç—É—à–∏—Ä—É—é —Ñ–æ—Ç–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            
            user_id = query.from_user.id
            if user_id not in self.user_states or "current_photo" not in self.user_states[user_id]:
                await query.edit_message_text("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            photo = self.user_states[user_id]["current_photo"]
            file = await context.bot.get_file(photo.file_id)
            
            file_id = str(uuid.uuid4())
            input_path = f"uploads/{file_id}_input.jpg"
            
            await file.download_to_drive(input_path)
            
            # Process
            output_path = await self.image_processor.retouch_image(input_path, file_id)
            
            # Send result
            with open(output_path, 'rb') as f:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=f,
                    caption="‚úÖ –§–æ—Ç–æ –æ—Ç—Ä–µ—Ç—É—à–∏—Ä–æ–≤–∞–Ω–æ!"
                )
            
            await query.edit_message_text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            # Cleanup
            os.remove(input_path)
            del self.user_states[user_id]
                
        except Exception as e:
            logger.error(f"Error in quick retouch: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ç—É—à–∏ —Ñ–æ—Ç–æ.")

    async def request_background_removal_method(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Request method for background removal"""
        keyboard = [
            [InlineKeyboardButton("üîß REMBG (–ë—ã—Å—Ç—Ä—ã–π)", callback_data="bg_method_rembg")],
            [InlineKeyboardButton("üéØ LBM (–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)", callback_data="bg_method_lbm")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîÑ **–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞:\n\n"
            "üîß **REMBG** - –ë—ã—Å—Ç—Ä—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π\n"
            "üéØ **LBM** - –ë–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
            "–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def request_person_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Request person photo for background swapping"""
        user_id = update.effective_user.id
        self.user_states[user_id] = {
            "state": "waiting_person_photo",
            "person_photos": []
        }
        
        await update.message.reply_text(
            "üë§ **–ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —Ñ–æ–Ω**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ —Ñ–æ–Ω—ã.\n\n"
            "üì∏ –õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—Ç —Ñ–æ—Ç–æ —Å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–∏–º—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º –Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–º —Ñ–æ–Ω–µ.",
            parse_mode='Markdown'
        )

    async def request_backgrounds_for_person_swap(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Request background photos for person swapping"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_states:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞.")
            return
            
        self.user_states[user_id]["state"] = "waiting_background_photos"
        self.user_states[user_id]["background_photos"] = []
        
        await update.message.reply_text(
            "üåÑ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ñ–æ–Ω–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞.\n\n"
            "üì∏ –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ–¥—Ä—è–¥\n"
            "‚úÖ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /done"
        )

    async def process_person_swap_final(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Process final person swap"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_states:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        state = self.user_states[user_id]
        person_photos = state.get("person_photos", [])
        background_photos = state.get("background_photos", [])
        
        if not person_photos or not background_photos:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
            return
        
        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —Ñ–æ–Ω—ã...")
        
        try:
            processor = ImageProcessor()
            file_id = str(uuid.uuid4())
            
            results = await processor.person_swap_separate(person_photos, background_photos, file_id)
            
            if results:
                await update.message.reply_text(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(results)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
                
                for i, result_path in enumerate(results):
                    try:
                        with open(result_path, 'rb') as photo:
                            await update.message.reply_photo(
                                photo=photo,
                                caption=f"üë§ –í–∞—Ä–∏–∞–Ω—Ç {i+1}"
                            )
                    except Exception as e:
                        logger.error(f"Error sending result {i}: {e}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–µ —á–µ–ª–æ–≤–µ–∫–∞")
                
        except Exception as e:
            logger.error(f"Error in person swap: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        
        # Clear state
        del self.user_states[user_id]
